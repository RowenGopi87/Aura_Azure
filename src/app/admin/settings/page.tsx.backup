"use client";

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useSettingsStore } from '@/store/settings-store';
import { useAuthStore } from '@/store/auth-store';
import { useRBAC } from '@/hooks/use-rbac';
import { V1Settings } from '@/components/ui/v1-settings';
import { ReverseEngineeringSettings } from '@/components/ui/reverse-engineering-settings';
import ArriveSettings from '@/components/settings/ArriveSettings';
import LLMDebugPanel from '@/components/settings/LLMDebugPanel';
import { API_KEYS } from '@/lib/config/environment';
import { 
  Brain, 
  Settings, 
  Key, 
  Eye, 
  EyeOff, 
  Save, 
  RefreshCw, 
  CheckCircle, 
  AlertCircle,
  Server,
  Database,
  Shield,
  Bot,
  ArrowLeft,
  Info,
  RotateCcw
} from 'lucide-react';
import Link from 'next/link';

export default function AdminSettingsPage() {
  const { user } = useAuthStore();
  const { isAdmin } = useRBAC();
  const { 
    llmSettings,
    availableProviders,
    setLLMProvider,
    setLLMModel,
    setAPIKey,
    setLLMSettings,
    resetLLMSettings,
    validateSettings,
    getCurrentProvider,
    getCurrentModel
  } = useSettingsStore();
  
  const [activeTab, setActiveTab] = useState('llm-modules');
  const [showApiKey, setShowApiKey] = useState(false);
  const [tempApiKey, setTempApiKey] = useState(llmSettings.apiKey);
  const [tempTemperature, setTempTemperature] = useState(llmSettings.temperature?.toString() || '0.7');
  const [tempMaxTokens, setTempMaxTokens] = useState(llmSettings.maxTokens?.toString() || '4000');
  const [isSaving, setIsSaving] = useState(false);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');

  const currentProvider = getCurrentProvider();
  const currentModel = getCurrentModel();
  const isValid = validateSettings();

  // Helper functions
  const loadApiKeyFromEnv = (providerId: string) => {
    let envApiKey = '';
    switch (providerId) {
      case 'openai':
        envApiKey = API_KEYS.openai;
        break;
      case 'google':
        envApiKey = API_KEYS.google;
        break;
      case 'anthropic':
        envApiKey = API_KEYS.anthropic;
        break;
    }
    
    if (envApiKey && envApiKey !== '') {
      setTempApiKey(envApiKey);
      return envApiKey;
    }
    return '';
  };

  const handleProviderChange = (provider: string) => {
    setLLMProvider(provider);
    const envKey = loadApiKeyFromEnv(provider);
    if (!envKey && llmSettings.apiKey) {
      setTempApiKey(llmSettings.apiKey);
    } else if (!envKey) {
      setTempApiKey('');
    }
  };

  const handleModelChange = (model: string) => {
    setLLMModel(model);
    const selectedModel = currentProvider?.models.find(m => m.id === model);
    if (selectedModel?.maxTokens) {
      setTempMaxTokens(selectedModel.maxTokens.toString());
    }
  };

  const handleSave = async () => {
    setIsSaving(true);
    setSaveStatus('idle');

    try {
      setAPIKey(tempApiKey);
      setLLMSettings({
        temperature: parseFloat(tempTemperature),
        maxTokens: parseInt(tempMaxTokens)
      });

      setSaveStatus('success');
      setTimeout(() => setSaveStatus('idle'), 3000);
    } catch (error) {
      console.error('Error saving settings:', error);
      setSaveStatus('error');
    } finally {
      setIsSaving(false);
    }
  };

  const handleReset = () => {
    resetLLMSettings();
    setTempApiKey('');
    setTempTemperature('0.7');
    setTempMaxTokens('4000');
    setSaveStatus('idle');
  };

  const getProviderDescription = (providerId: string) => {
    switch (providerId) {
      case 'openai':
        return 'Advanced AI models including GPT-4, GPT-3.5 Turbo with excellent reasoning capabilities.';
      case 'google':
        return 'Google\'s Gemini models with strong multimodal capabilities and competitive performance.';
      case 'anthropic':
        return 'Anthropic\'s Claude models known for safety, helpfulness, and nuanced understanding.';
      default:
        return 'Select a provider to see more information.';
    }
  };

  const getApiKeyInstructions = (providerId: string) => {
    switch (providerId) {
      case 'openai':
        return 'Get your API key from https://platform.openai.com/api-keys. Keys start with "sk-".';
      case 'google':
        return 'Get your API key from https://aistudio.google.com/app/apikey. Keys start with "AI".';
      case 'anthropic':
        return 'Get your API key from https://console.anthropic.com/. Keys start with "sk-ant-".';
      default:
        return 'Please select a provider to see API key instructions.';
    }
  };

  const getApiKeyPlaceholder = (providerId: string) => {
    switch (providerId) {
      case 'openai':
        return 'sk-...';
      case 'google':
        return 'AI...';
      case 'anthropic':
        return 'sk-ant-...';
      default:
        return 'Enter API key';
    }
  };

  const hasEnvApiKey = (providerId: string) => {
    switch (providerId) {
      case 'openai':
        return !!API_KEYS.openai;
      case 'google':
        return !!API_KEYS.google;
      case 'anthropic':
        return !!API_KEYS.anthropic;
      default:
        return false;
    }
  };

  if (!isAdmin) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="w-96">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Shield className="h-5 w-5 text-red-600" />
              <span>Access Denied</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600">
              You don't have permission to access admin settings.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link href="/admin/users">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Admin
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center space-x-2">
              <Settings className="h-8 w-8 text-blue-600" />
              <span>Admin Settings</span>
            </h1>
            <p className="text-gray-600 mt-1">
              Configure system-wide LLM providers, API keys, and module settings
            </p>
          </div>
        </div>
        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-300">
          <Settings className="w-4 h-4 mr-1" />
          Admin Configuration
        </Badge>
      </div>

      {/* Main Content */}
      <div className="space-y-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="llm-modules" className="flex items-center space-x-2">
              <Brain className="h-4 w-4" />
              <span>LLM Modules</span>
            </TabsTrigger>
            <TabsTrigger value="global-settings" className="flex items-center space-x-2">
              <Server className="h-4 w-4" />
              <span>Global Settings</span>
            </TabsTrigger>
            <TabsTrigger value="api-keys" className="flex items-center space-x-2">
              <Key className="h-4 w-4" />
              <span>API Keys</span>
            </TabsTrigger>
            <TabsTrigger value="assistant" className="flex items-center space-x-2">
              <Bot className="h-4 w-4" />
              <span>AI Assistant</span>
            </TabsTrigger>
          </TabsList>

          {/* LLM Modules Tab */}
          <TabsContent value="llm-modules" className="space-y-6">
            {/* Global LLM Configuration */}
            <Card>
              <CardHeader>
                <div className="flex items-center space-x-2">
                  <Brain className="h-5 w-5 text-blue-600" />
                  <CardTitle>Global LLM Provider Configuration</CardTitle>
                </div>
                <CardDescription>
                  Configure your preferred language model provider and settings. This serves as the default for all modules.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Provider Selection */}
                <div className="space-y-2">
                  <Label htmlFor="provider">Provider</Label>
                  <select 
                    value={llmSettings.provider} 
                    onChange={(e) => handleProviderChange(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  >
                    {availableProviders.map((provider) => (
                      <option key={provider.id} value={provider.id}>
                        {provider.name} {hasEnvApiKey(provider.id) ? '(ENV)' : ''}
                      </option>
                    ))}
                  </select>
                  {currentProvider && (
                    <p className="text-sm text-gray-600">{getProviderDescription(currentProvider.id)}</p>
                  )}
                </div>

                {/* Model Selection */}
                {currentProvider && (
                  <div className="space-y-2">
                    <Label htmlFor="model">Model</Label>
                    <select 
                      value={llmSettings.model} 
                      onChange={(e) => handleModelChange(e.target.value)}
                      className="w-full p-2 border rounded-md"
                    >
                      {currentProvider.models.map((model) => (
                        <option key={model.id} value={model.id}>
                          {model.name}
                        </option>
                      ))}
                    </select>
                    {currentModel && (
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        {currentModel.maxTokens && <span>Max tokens: {currentModel.maxTokens.toLocaleString()}</span>}
                        {currentModel.inputCost && <span>• Input: ${currentModel.inputCost}/1K</span>}
                        {currentModel.outputCost && <span>• Output: ${currentModel.outputCost}/1K</span>}
                      </div>
                    )}
                  </div>
                )}

                {/* API Key Configuration */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Key className="h-4 w-4 text-gray-600" />
                    <Label htmlFor="apiKey">API Key</Label>
                    {currentProvider && hasEnvApiKey(currentProvider.id) && (
                      <Badge variant="secondary" className="text-xs">
                        Loaded from Environment
                      </Badge>
                    )}
                  </div>
                  
                  {currentProvider && (
                    <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                      <div className="flex items-center space-x-2 text-blue-800 text-sm">
                        <Info className="h-4 w-4" />
                        <span className="font-medium">
                          API Key {hasEnvApiKey(currentProvider.id) ? 'Available' : 'Required'}
                        </span>
                      </div>
                      <p className="text-blue-700 text-sm mt-1">
                        {hasEnvApiKey(currentProvider.id) 
                          ? `API key loaded from environment variables. You can override it here if needed.`
                          : getApiKeyInstructions(currentProvider.id)
                        }
                      </p>
                    </div>
                  )}

                  <div className="relative">
                    <Input
                      id="apiKey"
                      type={showApiKey ? 'text' : 'password'}
                      value={tempApiKey}
                      onChange={(e) => setTempApiKey(e.target.value)}
                      placeholder={currentProvider ? getApiKeyPlaceholder(currentProvider.id) : 'Enter API key'}
                      className="pr-10"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 hover:bg-transparent"
                      onClick={() => setShowApiKey(!showApiKey)}
                    >
                      {showApiKey ? <EyeOff size={16} /> : <Eye size={16} />}
                    </Button>
                  </div>
                </div>

                {/* Advanced Settings */}
                <div className="space-y-4">
                  <Label className="text-base font-medium">Advanced Settings</Label>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="temperature">Temperature</Label>
                      <Input
                        id="temperature"
                        type="number"
                        min="0"
                        max="2"
                        step="0.1"
                        value={tempTemperature}
                        onChange={(e) => setTempTemperature(e.target.value)}
                      />
                      <p className="text-xs text-gray-600">
                        Controls randomness. Lower = more focused, Higher = more creative (0-2)
                      </p>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="maxTokens">Max Tokens</Label>
                      <Input
                        id="maxTokens"
                        type="number"
                        min="1"
                        value={tempMaxTokens}
                        onChange={(e) => setTempMaxTokens(e.target.value)}
                      />
                      <p className="text-xs text-gray-600">
                        Maximum number of tokens in the response
                      </p>
                    </div>
                  </div>
                </div>

                {/* Save Actions */}
                <div className="flex items-center justify-between pt-4">
                  <Button
                    variant="outline"
                    onClick={handleReset}
                    className="flex items-center space-x-2"
                  >
                    <RotateCcw size={16} />
                    <span>Reset to Defaults</span>
                  </Button>

                  <div className="flex items-center space-x-3">
                    {saveStatus === 'success' && (
                      <div className="flex items-center space-x-2 text-green-600">
                        <CheckCircle size={16} />
                        <span className="text-sm">Settings saved!</span>
                      </div>
                    )}
                    {saveStatus === 'error' && (
                      <div className="flex items-center space-x-2 text-red-600">
                        <AlertCircle size={16} />
                        <span className="text-sm">Save failed</span>
                      </div>
                    )}
                    
                    <Button 
                      onClick={handleSave}
                      disabled={isSaving || !currentProvider}
                      className="flex items-center space-x-2"
                    >
                      {isSaving ? <RefreshCw size={16} className="animate-spin" /> : <Save size={16} />}
                      <span>{isSaving ? 'Saving...' : 'Save Configuration'}</span>
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* V1 Module LLM Settings */}
            <Card>
              <CardHeader>
                <div className="flex items-center space-x-2">
                  <Settings className="h-5 w-5 text-purple-600" />
                  <CardTitle>V1 Module LLM Assignment</CardTitle>
                </div>
                <CardDescription>
                  Configure primary and backup LLMs for each V1 module. Each module can use different LLMs with automatic fallback.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <V1Settings showActions={false} />
              </CardContent>
            </Card>

            {/* Reverse Engineering LLM Settings */}
            <Card>
              <CardHeader>
                <div className="flex items-center space-x-2">
                  <Brain className="h-5 w-5 text-green-600" />
                  <CardTitle>Reverse Engineering LLM Settings</CardTitle>
                </div>
                <CardDescription>
                  Configure specialized LLMs for reverse engineering tasks in design and code analysis.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ReverseEngineeringSettings showActions={false} />
              </CardContent>
            </Card>
          </TabsContent>

          {/* Global Settings Tab */}
          <TabsContent value="global-settings" className="space-y-6">
            {/* ARRIVE Integration Settings */}
            <ArriveSettings />

            {/* Configuration Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <CheckCircle className={isValid ? "text-green-600" : "text-gray-400"} size={20} />
                  <span>Configuration Status</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Provider Selected</span>
                    <Badge variant={llmSettings.provider ? "default" : "secondary"}>
                      {llmSettings.provider ? "✓" : "✗"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Model Selected</span>
                    <Badge variant={llmSettings.model ? "default" : "secondary"}>
                      {llmSettings.model ? "✓" : "✗"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">API Key Configured</span>
                    <Badge variant={llmSettings.apiKey ? "default" : "secondary"}>
                      {llmSettings.apiKey ? "✓" : "✗"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* API Keys Tab */}
          <TabsContent value="api-keys" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Key className="h-5 w-5 text-yellow-600" />
                  <span>API Key Management</span>
                </CardTitle>
                <CardDescription>
                  Manage API keys for different LLM providers. Keys are encrypted and stored securely.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {availableProviders.map((provider) => (
                  <div key={provider.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium">{provider.name}</h3>
                      <Badge variant="outline">{provider.id}</Badge>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor={`api-key-${provider.id}`}>API Key</Label>
                      <div className="flex space-x-2">
                        <Input
                          id={`api-key-${provider.id}`}
                          type="password"
                          placeholder={`Enter ${provider.name} API key`}
                          className="flex-1"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </div>
                      <p className="text-sm text-gray-600">
                        {provider.description}
                      </p>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Assistant Tab */}
          <TabsContent value="assistant" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bot className="h-5 w-5 text-green-600" />
                  <span>AI Assistant Settings</span>
                </CardTitle>
                <CardDescription>
                  Configure the Aura AI assistant behavior and chat settings (moved from right panel)
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="bg-gray-200/60 backdrop-blur-sm p-4 rounded-lg border border-gray-300/40">
                  <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                    <Bot size={16} className="mr-2" />
                    Aura Assistant
                  </h4>
                  <p className="text-sm text-gray-700 mb-3">
                    Your AI-powered assistant for navigating the AuraV2 workflow and getting help with tasks.
                  </p>
                  <div className="text-xs text-gray-600 space-y-1">
                    <div>• Ask questions about business briefs</div>
                    <div>• Get guidance on workflow stages</div>
                    <div>• Request help with AI assessments</div>
                    <div>• Navigate between features</div>
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="assistant-system-prompt">System Prompt</Label>
                  <Textarea
                    id="assistant-system-prompt"
                    rows={6}
                    defaultValue="You are Aura, a friendly and intelligent assistant for SDLC management..."
                    placeholder="Enter system prompt for the AI assistant"
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="assistant-max-history">Max Chat History</Label>
                    <Input
                      id="assistant-max-history"
                      type="number"
                      min="5"
                      max="50"
                      defaultValue="20"
                      placeholder="20"
                    />
                  </div>
                  <div>
                    <Label htmlFor="assistant-context-window">Context Window</Label>
                    <Input
                      id="assistant-context-window"
                      type="number"
                      min="1000"
                      max="32000"
                      defaultValue="8000"
                      placeholder="8000"
                    />
                  </div>
                </div>

                <div className="bg-gray-100/50 backdrop-blur-sm p-4 rounded-lg border border-gray-300/40">
                  <h4 className="font-medium text-gray-900 mb-2">Chat Configuration</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="chat-temperature">Chat Temperature</Label>
                      <Input
                        id="chat-temperature"
                        type="number"
                        min="0"
                        max="2"
                        step="0.1"
                        defaultValue="0.7"
                        placeholder="0.7"
                      />
                    </div>
                    <div>
                      <Label htmlFor="chat-max-tokens">Chat Max Tokens</Label>
                      <Input
                        id="chat-max-tokens"
                        type="number"
                        min="100"
                        max="4000"
                        defaultValue="1000"
                        placeholder="1000"
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* LLM Debug Panel */}
        <LLMDebugPanel />
      </div>
    </div>
  );
}
