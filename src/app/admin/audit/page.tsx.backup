"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import {
  Activity,
  Users,
  FileText,
  Edit3,
  Save,
  Trash2,
  Download,
  Search,
  Filter,
  Calendar,
  Clock,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Brain,
  Zap,
  Eye,
  Settings,
  Shield
} from "lucide-react";
import { useAuthStore } from "@/store/auth-store";
import Link from "next/link";

interface AuditEvent {
  id: string;
  userId: string;
  userName: string;
  userEmail: string;
  eventType: string;
  featureCategory: string;
  action: string;
  resourceType: string;
  resourceId: string;
  resourceTitle: string;
  wasSaved: boolean;
  wasEdited: boolean;
  wasExported: boolean;
  wasIntegrated: boolean;
  integrationTarget?: string;
  generationTimeMs?: number;
  aiModelUsed?: string;
  createdAt: string;
}

interface AnalyticsData {
  totalGenerations: number;
  totalEdits: number;
  totalSaves: number;
  totalDeletes: number;
  totalExports: number;
  avgGenerationTime: number;
  topUsers: Array<{ name: string; count: number }>;
  featureUsage: Array<{ feature: string; count: number }>;
  dailyActivity: Array<{ date: string; generations: number; edits: number; saves: number }>;
  valueMetrics: {
    generationsKeptWithoutEdit: number;
    generationsEdited: number;
    generationsDeleted: number;
    averageEditCount: number;
  };
  promptAnalytics: Array<{ keyword: string; usage: number; successRate: number }>;
}

const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c', '#8dd1e1'];

export default function AuditDashboardPage() {
  const { user } = useAuthStore();
  const [auditEvents, setAuditEvents] = useState<AuditEvent[]>([]);
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    dateRange: '7d',
    eventType: 'all',
    featureCategory: 'all',
    userId: 'all'
  });
  const [searchQuery, setSearchQuery] = useState('');

  // Check if user is admin
  const isAdmin = user?.roles?.includes('system_administrator') || user?.roles?.includes('admin');

  useEffect(() => {
    if (isAdmin) {
      loadAuditData();
    }
  }, [isAdmin, filters]);

  const loadAuditData = async () => {
    setLoading(true);
    try {
      // Fetch real analytics data from database
      const analyticsResponse = await fetch(`/api/admin/audit/analytics?${new URLSearchParams({
        dateRange: filters.dateRange,
        eventType: filters.eventType,
        featureCategory: filters.featureCategory
      })}`);
      
      if (analyticsResponse.ok) {
        const analyticsData = await analyticsResponse.json();
        setAnalytics(analyticsData);
      }

      // Fetch real events data from database
      const eventsResponse = await fetch(`/api/admin/audit/events?${new URLSearchParams({
        dateRange: filters.dateRange,
        eventType: filters.eventType,
        featureCategory: filters.featureCategory,
        userId: filters.userId,
        limit: '50',
        offset: '0'
      })}`);
      
      if (eventsResponse.ok) {
        const eventsData = await eventsResponse.json();
        setAuditEvents(eventsData.events || []);
      }
      
    } catch (error) {
      console.error('Failed to load audit data:', error);
      // Fallback to mock data if API fails
      const mockEvents = generateMockAuditEvents();
      const mockAnalytics = generateMockAnalytics();
      setAuditEvents(mockEvents);
      setAnalytics(mockAnalytics);
    } finally {
      setLoading(false);
    }
  };

  if (!isAdmin) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <Shield className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600">You need administrator privileges to view audit logs.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent mx-auto mb-4" />
          <p className="text-gray-600">Loading audit data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      
      {/* Glass Effect Container */}
      <div className="bg-white/20 backdrop-blur-md border border-white/30 rounded-lg shadow-xl p-6 space-y-6">
        
        {/* Header with Buttons */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Audit Dashboard</h1>
            <p className="text-gray-600 mt-1">Monitor user activity and system usage analytics</p>
          </div>
          
          <div className="flex items-center space-x-3">
            <Link href="/admin/users">
              <Button variant="outline" size="sm">
                <Users className="h-4 w-4 mr-2" />
                Manage Users
              </Button>
            </Link>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => {
                if (typeof window !== 'undefined') {
                  localStorage.clear();
                  sessionStorage.clear();
                  window.location.reload();
                }
              }}
            >
              <TrendingUp className="h-4 w-4 mr-2" />
              Clear Cache
            </Button>
            <Button className="bg-black text-white hover:bg-gray-800" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
            <Link href="/admin/audit/settings">
              <Button variant="outline" size="sm">
                <Settings className="h-4 w-4 mr-2" />
                Configure
              </Button>
            </Link>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-gray-200/60 backdrop-blur-sm border border-gray-300/40 rounded-lg p-4">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Calendar className="h-4 w-4 text-gray-500" />
              <Select value={filters.dateRange} onValueChange={(value) => setFilters(prev => ({...prev, dateRange: value}))}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1d">Last 24h</SelectItem>
                  <SelectItem value="7d">Last 7 days</SelectItem>
                  <SelectItem value="30d">Last 30 days</SelectItem>
                  <SelectItem value="90d">Last 90 days</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <Select value={filters.eventType} onValueChange={(value) => setFilters(prev => ({...prev, eventType: value}))}>
                <SelectTrigger className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Events</SelectItem>
                  <SelectItem value="generation">Generations</SelectItem>
                  <SelectItem value="edit">Edits</SelectItem>
                  <SelectItem value="save">Saves</SelectItem>
                  <SelectItem value="delete">Deletes</SelectItem>
                  <SelectItem value="export">Exports</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-center space-x-2">
              <Search className="h-4 w-4 text-gray-500" />
              <Input
                placeholder="Search events..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-64"
              />
            </div>
          </div>
          </div>
        </div>

        {/* Analytics Overview */}
        {analytics && (
          <div className="bg-gray-200/60 backdrop-blur-sm border border-gray-300/40 rounded-lg p-4">
            <h3 className="text-base font-semibold text-gray-900 mb-4">Analytics Overview</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="p-4 bg-gray-50/80 rounded-lg border border-gray-200/50">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Total Generations</p>
                    <p className="text-2xl font-bold text-blue-600">{analytics.totalGenerations}</p>
                  </div>
                  <Brain className="h-8 w-8 text-blue-600" />
                </div>
              </div>
              
              <div className="p-4 bg-gray-50/80 rounded-lg border border-gray-200/50">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Content Saves</p>
                    <p className="text-2xl font-bold text-green-600">{analytics.totalSaves}</p>
                  </div>
                  <Save className="h-8 w-8 text-green-600" />
                </div>
              </div>
              
              <div className="p-4 bg-gray-50/80 rounded-lg border border-gray-200/50">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Edits Made</p>
                    <p className="text-2xl font-bold text-orange-600">{analytics.totalEdits}</p>
                  </div>
                  <Edit3 className="h-8 w-8 text-orange-600" />
                </div>
              </div>
              
              <div className="p-4 bg-gray-50/80 rounded-lg border border-gray-200/50">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Avg Generation Time</p>
                    <p className="text-2xl font-bold text-purple-600">{analytics.avgGenerationTime}ms</p>
                  </div>
                  <Clock className="h-8 w-8 text-purple-600" />
                </div>
              </div>
            </div>
          </div>
        )}

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="events">Event Log</TabsTrigger>
          <TabsTrigger value="value-metrics">Value Metrics</TabsTrigger>
          <TabsTrigger value="prompts">Prompt Analytics</TabsTrigger>
          <TabsTrigger value="users">User Activity</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="bg-gray-200/50 backdrop-blur-sm border-0 rounded-lg p-4">
            <h3 className="text-base font-semibold text-gray-900 mb-4">Audit Overview</h3>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Daily Activity Chart */}
              <div className="bg-gray-50/80 rounded-lg border border-gray-200/50 p-4">
                <Card className="border-0 rounded-none">
              <CardHeader>
                <CardTitle>Daily Activity</CardTitle>
                <CardDescription>Generations, edits, and saves over time</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={analytics?.dailyActivity || []}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="generations" stroke="#8884d8" name="Generations" />
                    <Line type="monotone" dataKey="edits" stroke="#82ca9d" name="Edits" />
                    <Line type="monotone" dataKey="saves" stroke="#ffc658" name="Saves" />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* Feature Usage */}
            <Card>
              <CardHeader>
                <CardTitle>Feature Usage</CardTitle>
                <CardDescription>Most used features by activity count</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={analytics?.featureUsage || []}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="feature" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="count" fill="#8884d8" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="events" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Recent Audit Events</CardTitle>
              <CardDescription>Latest user activities and system events</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {auditEvents.slice(0, 20).map((event) => (
                  <div key={event.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center space-x-4">
                      <div className={`p-2 rounded-lg ${getEventTypeColor(event.eventType)}`}>
                        {getEventTypeIcon(event.eventType)}
                      </div>
                      <div>
                        <p className="font-medium">{event.userName}</p>
                        <p className="text-sm text-gray-600">
                          {event.action} • {event.resourceTitle}
                        </p>
                        <p className="text-xs text-gray-500">
                          {new Date(event.createdAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{event.featureCategory}</Badge>
                      {event.wasSaved && <CheckCircle className="h-4 w-4 text-green-600" />}
                      {event.wasExported && <Download className="h-4 w-4 text-blue-600" />}
                      {event.generationTimeMs && (
                        <span className="text-xs text-gray-500">{event.generationTimeMs}ms</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="value-metrics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-green-600 mb-2">
                  {analytics?.valueMetrics.generationsKeptWithoutEdit || 0}
                </div>
                <p className="text-sm text-gray-600">Generations Kept Without Editing</p>
                <p className="text-xs text-green-600 mt-1">High Value Indicator</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-orange-600 mb-2">
                  {analytics?.valueMetrics.generationsEdited || 0}
                </div>
                <p className="text-sm text-gray-600">Generations Edited</p>
                <p className="text-xs text-orange-600 mt-1">Improvement Needed</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-red-600 mb-2">
                  {analytics?.valueMetrics.generationsDeleted || 0}
                </div>
                <p className="text-sm text-gray-600">Generations Deleted</p>
                <p className="text-xs text-red-600 mt-1">Low Value</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-blue-600 mb-2">
                  {analytics?.valueMetrics.averageEditCount || 0}
                </div>
                <p className="text-sm text-gray-600">Average Edits per Generation</p>
                <p className="text-xs text-blue-600 mt-1">Quality Metric</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="prompts" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Top Keywords in Prompts</CardTitle>
              <CardDescription>Most frequently used keywords and their success rates</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analytics?.promptAnalytics.slice(0, 10).map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Badge variant="outline">#{index + 1}</Badge>
                      <span className="font-medium">{item.keyword}</span>
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className="text-sm text-gray-600">{item.usage} uses</span>
                      <div className="flex items-center space-x-1">
                        <span className="text-sm font-medium">{(item.successRate * 100).toFixed(1)}%</span>
                        <div className={`w-2 h-2 rounded-full ${
                          item.successRate > 0.8 ? 'bg-green-500' : 
                          item.successRate > 0.6 ? 'bg-yellow-500' : 'bg-red-500'
                        }`} />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="users" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Top Active Users</CardTitle>
              <CardDescription>Users with highest activity levels</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analytics?.topUsers.map((user, index) => (
                  <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Badge variant="outline">#{index + 1}</Badge>
                      <div>
                        <p className="font-medium">{user.name}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Activity className="h-4 w-4 text-gray-500" />
                      <span className="font-medium">{user.count} activities</span>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        </Tabs>
        
      </div>
    </div>
  );
}

// Helper functions
function getEventTypeColor(eventType: string): string {
  const colors = {
    generation: 'bg-purple-100 text-purple-600',
    edit: 'bg-orange-100 text-orange-600',
    save: 'bg-green-100 text-green-600',
    delete: 'bg-red-100 text-red-600',
    export: 'bg-blue-100 text-blue-600',
    view: 'bg-gray-100 text-gray-600'
  };
  return colors[eventType as keyof typeof colors] || 'bg-gray-100 text-gray-600';
}

function getEventTypeIcon(eventType: string) {
  const icons = {
    generation: <Brain className="h-4 w-4" />,
    edit: <Edit3 className="h-4 w-4" />,
    save: <Save className="h-4 w-4" />,
    delete: <Trash2 className="h-4 w-4" />,
    export: <Download className="h-4 w-4" />,
    view: <Eye className="h-4 w-4" />
  };
  return icons[eventType as keyof typeof icons] || <Activity className="h-4 w-4" />;
}

// Mock data generators
function generateMockAuditEvents(): AuditEvent[] {
  const events: AuditEvent[] = [];
  const users = [
    { name: 'Sarah Ahmed', email: 'sarah.ahmed@emirates.com' },
    { name: 'Mohammed Hassan', email: 'mohammed.hassan@emirates.com' },
    { name: 'Fatima Ali', email: 'fatima.ali@emirates.com' }
  ];
  
  for (let i = 0; i < 50; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const eventType = ['generation', 'edit', 'save', 'delete', 'export'][Math.floor(Math.random() * 5)];
    const featureCategory = ['brief', 'initiative', 'epic', 'story', 'code', 'design'][Math.floor(Math.random() * 6)];
    
    events.push({
      id: `event_${i}`,
      userId: `user_${i}`,
      userName: user.name,
      userEmail: user.email,
      eventType,
      featureCategory,
      action: `${eventType}_${featureCategory}`,
      resourceType: featureCategory,
      resourceId: `resource_${i}`,
      resourceTitle: `Sample ${featureCategory} ${i}`,
      wasSaved: Math.random() > 0.3,
      wasEdited: Math.random() > 0.5,
      wasExported: Math.random() > 0.8,
      wasIntegrated: Math.random() > 0.9,
      generationTimeMs: eventType === 'generation' ? Math.floor(Math.random() * 5000) + 1000 : undefined,
      aiModelUsed: eventType === 'generation' ? 'gpt-4' : undefined,
      createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString()
    });
  }
  
  return events.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
}

function generateMockAnalytics(): AnalyticsData {
  return {
    totalGenerations: 156,
    totalEdits: 89,
    totalSaves: 134,
    totalDeletes: 23,
    totalExports: 45,
    avgGenerationTime: 2340,
    topUsers: [
      { name: 'Sarah Ahmed', count: 45 },
      { name: 'Mohammed Hassan', count: 38 },
      { name: 'Fatima Ali', count: 32 }
    ],
    featureUsage: [
      { feature: 'Brief', count: 67 },
      { feature: 'Initiative', count: 45 },
      { feature: 'Epic', count: 34 },
      { feature: 'Story', count: 28 },
      { feature: 'Code', count: 23 },
      { feature: 'Design', count: 19 }
    ],
    dailyActivity: Array.from({ length: 7 }, (_, i) => ({
      date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString(),
      generations: Math.floor(Math.random() * 20) + 5,
      edits: Math.floor(Math.random() * 15) + 3,
      saves: Math.floor(Math.random() * 25) + 8
    })).reverse(),
    valueMetrics: {
      generationsKeptWithoutEdit: 89,
      generationsEdited: 45,
      generationsDeleted: 12,
      averageEditCount: 2.3
    },
    promptAnalytics: [
      { keyword: 'efficiency', usage: 34, successRate: 0.85 },
      { keyword: 'automation', usage: 28, successRate: 0.79 },
      { keyword: 'customer', usage: 25, successRate: 0.92 },
      { keyword: 'digital', usage: 23, successRate: 0.88 },
      { keyword: 'process', usage: 21, successRate: 0.74 },
      { keyword: 'improvement', usage: 19, successRate: 0.81 },
      { keyword: 'system', usage: 18, successRate: 0.77 },
      { keyword: 'integration', usage: 16, successRate: 0.83 },
      { keyword: 'analytics', usage: 14, successRate: 0.90 },
      { keyword: 'security', usage: 12, successRate: 0.95 }
    ]
  };
}
