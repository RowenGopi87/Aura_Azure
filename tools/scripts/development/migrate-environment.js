#!/usr/bin/env node

/**
 * Environment Configuration Migration Script
 * Helps migrate from old hardcoded values to new environment variable structure
 */

const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

function readEnvFile(filePath) {
  if (!checkFileExists(filePath)) {
    return {};
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  const env = {};
  
  content.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim();
      }
    }
  });
  
  return env;
}

function writeEnvFile(filePath, env) {
  const lines = [];
  
  // Add header
  lines.push('# ========================================');
  lines.push('# AURA ENTERPRISE ENVIRONMENT CONFIGURATION');
  lines.push('# Generated by migration script');
  lines.push(`# ${new Date().toISOString()}`);
  lines.push('# ========================================');
  lines.push('');
  
  // Group variables by category
  const categories = {
    'Application': ['NEXT_PUBLIC_APP_URL', 'NEXTAUTH_URL', 'NODE_ENV'],
    'Database': ['AURA_DB_HOST', 'AURA_DB_PORT', 'AURA_DB_USER', 'AURA_DB_PASSWORD', 'AURA_DB_NAME', 'AURA_DB_MAX_POOL_SIZE', 'AURA_DB_SSL'],
    'MCP Servers': ['MCP_BRIDGE_URL', 'PLAYWRIGHT_MCP_URL', 'JIRA_MCP_URL', 'JIRA_CLOUD_ID'],
    'LLM API Keys': ['OPENAI_API_KEY', 'GOOGLE_API_KEY', 'ANTHROPIC_API_KEY'],
    'Embedding & RAG': ['AURA_EMBEDDING_PROVIDER', 'AURA_EMBEDDING_API_KEY', 'AURA_EMBEDDING_MODEL'],
    'Security': ['DEBUG_MODE', 'API_RATE_LIMIT_ENABLED']
  };
  
  Object.entries(categories).forEach(([category, keys]) => {
    lines.push(`# ${category} Configuration`);
    keys.forEach(key => {
      if (env[key] !== undefined) {
        lines.push(`${key}=${env[key]}`);
      }
    });
    lines.push('');
  });
  
  // Add any remaining variables
  const categorizedKeys = new Set(Object.values(categories).flat());
  const remainingKeys = Object.keys(env).filter(key => !categorizedKeys.has(key));
  
  if (remainingKeys.length > 0) {
    lines.push('# Additional Configuration');
    remainingKeys.forEach(key => {
      lines.push(`${key}=${env[key]}`);
    });
  }
  
  fs.writeFileSync(filePath, lines.join('\n'));
}

function migrateConfiguration() {
  log('üîÑ Aura Environment Configuration Migration', 'cyan');
  log('==========================================', 'cyan');
  log('');
  
  const rootDir = path.join(__dirname, '../../..');
  const templatePath = path.join(rootDir, 'config/environment/env.template');
  const currentEnvPath = path.join(rootDir, '.env');
  const backupEnvPath = path.join(rootDir, '.env.backup');
  
  // Check if template exists
  if (!checkFileExists(templatePath)) {
    log('‚ùå Environment template not found!', 'red');
    log(`Expected: ${templatePath}`, 'red');
    return false;
  }
  
  // Read template to get all available variables
  const templateEnv = readEnvFile(templatePath);
  log(`‚úÖ Found template with ${Object.keys(templateEnv).length} variables`, 'green');
  
  // Check current .env file
  let currentEnv = {};
  if (checkFileExists(currentEnvPath)) {
    log('üìã Found existing .env file', 'yellow');
    
    // Create backup
    fs.copyFileSync(currentEnvPath, backupEnvPath);
    log(`üíæ Backup created: ${backupEnvPath}`, 'green');
    
    currentEnv = readEnvFile(currentEnvPath);
    log(`üìä Current .env has ${Object.keys(currentEnv).length} variables`, 'blue');
  } else {
    log('üìù No existing .env file found, creating new one', 'yellow');
  }
  
  // Merge configurations
  const mergedEnv = { ...templateEnv, ...currentEnv };
  
  // Check for important missing values
  const criticalVars = {
    'AURA_DB_PASSWORD': 'Database password',
    'OPENAI_API_KEY': 'OpenAI API key (or GOOGLE_API_KEY)',
    'GOOGLE_API_KEY': 'Google AI API key (or OPENAI_API_KEY)'
  };
  
  const missingCritical = [];
  Object.entries(criticalVars).forEach(([key, description]) => {
    if (!mergedEnv[key] || mergedEnv[key].includes('your_') || mergedEnv[key].includes('here')) {
      missingCritical.push({ key, description });
    }
  });
  
  // Update placeholder values
  Object.keys(mergedEnv).forEach(key => {
    if (typeof mergedEnv[key] === 'string') {
      // Update old hardcoded values
      if (mergedEnv[key] === 'aura_password_123') {
        mergedEnv[key] = 'your_secure_database_password_here';
        log(`üîê Updated ${key} to use secure placeholder`, 'yellow');
      }
      
      if (mergedEnv[key] === 'http://localhost:8000' && key === 'MCP_BRIDGE_URL') {
        // Keep the default but note it
        log(`üîó Using default MCP Bridge URL: ${mergedEnv[key]}`, 'blue');
      }
    }
  });
  
  // Write new .env file
  writeEnvFile(currentEnvPath, mergedEnv);
  log(`‚úÖ New .env file created with ${Object.keys(mergedEnv).length} variables`, 'green');
  
  // Show summary
  log('');
  log('üìã Migration Summary:', 'bright');
  log('===================', 'bright');
  
  if (missingCritical.length > 0) {
    log('‚ö†Ô∏è  Critical variables that need your attention:', 'yellow');
    missingCritical.forEach(({ key, description }) => {
      log(`   ‚Ä¢ ${key}: ${description}`, 'yellow');
    });
    log('');
  }
  
  log('üéØ Next Steps:', 'bright');
  log('1. Edit your .env file and set the required values', 'blue');
  log('2. Update database password from default', 'blue');
  log('3. Add at least one LLM API key', 'blue');
  log('4. Run: npm run dev', 'blue');
  log('');
  
  log('üìö For detailed configuration guide, see:', 'bright');
  log('   docs/deployment/ENVIRONMENT_SETUP.md', 'cyan');
  
  return true;
}

function validateCurrentConfig() {
  log('üîç Validating Current Configuration', 'cyan');
  log('==================================', 'cyan');
  
  const rootDir = path.join(__dirname, '../../..');
  const envPath = path.join(rootDir, '.env');
  
  if (!checkFileExists(envPath)) {
    log('‚ùå No .env file found!', 'red');
    log('Run the migration first: node tools/scripts/development/migrate-environment.js', 'yellow');
    return false;
  }
  
  const env = readEnvFile(envPath);
  const issues = [];
  const warnings = [];
  
  // Check critical variables
  if (!env.AURA_DB_PASSWORD || env.AURA_DB_PASSWORD.includes('your_') || env.AURA_DB_PASSWORD === 'aura_password_123') {
    issues.push('AURA_DB_PASSWORD needs to be set to a secure password');
  }
  
  const hasApiKey = env.OPENAI_API_KEY || env.GOOGLE_API_KEY || env.ANTHROPIC_API_KEY;
  if (!hasApiKey) {
    issues.push('At least one LLM API key must be configured');
  }
  
  if (!env.JIRA_CLOUD_ID || env.JIRA_CLOUD_ID.includes('your_')) {
    warnings.push('JIRA_CLOUD_ID not configured - Jira integration will not work');
  }
  
  // Show results
  if (issues.length === 0) {
    log('‚úÖ Configuration looks good!', 'green');
  } else {
    log('‚ùå Configuration issues found:', 'red');
    issues.forEach(issue => log(`   ‚Ä¢ ${issue}`, 'red'));
  }
  
  if (warnings.length > 0) {
    log('‚ö†Ô∏è  Warnings:', 'yellow');
    warnings.forEach(warning => log(`   ‚Ä¢ ${warning}`, 'yellow'));
  }
  
  log('');
  log(`üìä Configuration Summary:`, 'bright');
  log(`   ‚Ä¢ Total variables: ${Object.keys(env).length}`, 'blue');
  log(`   ‚Ä¢ Database configured: ${env.AURA_DB_PASSWORD && !env.AURA_DB_PASSWORD.includes('your_') ? '‚úÖ' : '‚ùå'}`, 'blue');
  log(`   ‚Ä¢ LLM APIs configured: ${hasApiKey ? '‚úÖ' : '‚ùå'}`, 'blue');
  log(`   ‚Ä¢ Jira configured: ${env.JIRA_CLOUD_ID && !env.JIRA_CLOUD_ID.includes('your_') ? '‚úÖ' : '‚ö†Ô∏è'}`, 'blue');
  
  return issues.length === 0;
}

// Main execution
function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'migrate';
  
  switch (command) {
    case 'migrate':
      migrateConfiguration();
      break;
    case 'validate':
      validateCurrentConfig();
      break;
    case 'help':
      log('Aura Environment Configuration Tool', 'bright');
      log('');
      log('Commands:', 'bright');
      log('  migrate   - Migrate configuration to new environment structure', 'blue');
      log('  validate  - Validate current configuration', 'blue');
      log('  help      - Show this help message', 'blue');
      log('');
      log('Examples:', 'bright');
      log('  node tools/scripts/development/migrate-environment.js migrate', 'cyan');
      log('  node tools/scripts/development/migrate-environment.js validate', 'cyan');
      break;
    default:
      log(`Unknown command: ${command}`, 'red');
      log('Use "help" for available commands', 'yellow');
      break;
  }
}

if (require.main === module) {
  main();
}

module.exports = { migrateConfiguration, validateCurrentConfig };
